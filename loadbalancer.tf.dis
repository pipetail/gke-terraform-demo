data "google_compute_instance_group" "default-pool" {
  count     = var.zones_count
  self_link = replace(google_container_node_pool.default-pool.instance_group_urls[count.index], "instanceGroupManagers", "instanceGroups")
}

resource "google_compute_instance_group_named_port" "named_port_default" {
  count = var.zones_count
  group = google_container_node_pool.default-pool.instance_group_urls[count.index]

  // index 8 should be the `zone` identifier in url
  zone = split("/", google_container_node_pool.default-pool.instance_group_urls[count.index])[8]

  name = var.service_port_name
  port = var.service_port
}

resource "google_compute_instance_group_named_port" "argo_named_port_default" {
  count = var.zones_count
  group = google_container_node_pool.default-pool.instance_group_urls[count.index]

  // index 8 should be the `zone` identifier in url
  zone = split("/", google_container_node_pool.default-pool.instance_group_urls[count.index])[8]

  name = var.argo_port_name
  port = var.argo_port
}

module "gce-lb-https" {
  source  = "github.com/GoogleCloudPlatform/terraform-google-lb-http"
  project = var.project
  name    = var.lb_name

  ssl                  = true
  use_ssl_certificates = true
  ssl_certificates = [
    google_compute_managed_ssl_certificate.jarvis-dev-indykite.self_link,
    google_compute_managed_ssl_certificate.graph-dev-indykite.self_link,
    google_compute_managed_ssl_certificate.argo-dev-indykite.self_link
  ]

  firewall_networks = [module.vpc_network.network]

  // Make sure when you create the cluster that you provide the `--tags` argument to add the appropriate `target_tags` referenced in the http module.
  target_tags = [var.target_tags]

  // Use custom url map.
  url_map        = google_compute_url_map.my-url-map.self_link
  create_url_map = false
  https_redirect = true

  backends = {
    default-new = {
      description = null
      protocol    = "HTTP2"
      port        = var.service_port
      // data.google_compute_instance_group.pool-1.named_port[local.prod_index]["name"]
      port_name                       = var.service_port_name
      timeout_sec                     = 10
      connection_draining_timeout_sec = null
      enable_cdn                      = false
      security_policy                 = null
      session_affinity                = null
      affinity_cookie_ttl_sec         = null
      custom_request_headers          = null

      health_check = {
        check_interval_sec  = null
        timeout_sec         = null
        healthy_threshold   = null
        unhealthy_threshold = null
        request_path        = "/healthz"
        port                = var.service_port
        host                = null
        logging             = true
      }

      log_config = {
        enable      = true
        sample_rate = 1.0
      }

      groups = [
        {
          group                        = data.google_compute_instance_group.default-pool[0].self_link
          balancing_mode               = null
          capacity_scaler              = null
          description                  = null
          max_connections              = null
          max_connections_per_instance = null
          max_connections_per_endpoint = null
          max_rate                     = null
          max_rate_per_instance        = null
          max_rate_per_endpoint        = null
          max_utilization              = null
        },
        {
          group                        = data.google_compute_instance_group.default-pool[1].self_link
          balancing_mode               = null
          capacity_scaler              = null
          description                  = null
          max_connections              = null
          max_connections_per_instance = null
          max_connections_per_endpoint = null
          max_rate                     = null
          max_rate_per_instance        = null
          max_rate_per_endpoint        = null
          max_utilization              = null
        },
        {
          group                        = data.google_compute_instance_group.default-pool[2].self_link
          balancing_mode               = null
          capacity_scaler              = null
          description                  = null
          max_connections              = null
          max_connections_per_instance = null
          max_connections_per_endpoint = null
          max_rate                     = null
          max_rate_per_instance        = null
          max_rate_per_endpoint        = null
          max_utilization              = null
        }
      ]

      iap_config = {
        enable               = false
        oauth2_client_id     = ""
        oauth2_client_secret = ""
      }
    }

    argo = {
      description = "argo-dev"
      protocol    = "HTTPS"
      port        = var.argo_port

      port_name                       = var.argo_port_name
      timeout_sec                     = 10
      connection_draining_timeout_sec = null
      enable_cdn                      = false
      security_policy                 = null
      session_affinity                = null
      affinity_cookie_ttl_sec         = null
      custom_request_headers          = null

      health_check = {
        check_interval_sec  = null
        timeout_sec         = null
        healthy_threshold   = null
        unhealthy_threshold = null
        request_path        = "/healthz"
        port                = var.argo_port
        host                = null
        logging             = true
      }

      log_config = {
        enable      = true
        sample_rate = 1.0
      }

      groups = [
        {
          group                        = data.google_compute_instance_group.default-pool[0].self_link
          balancing_mode               = null
          capacity_scaler              = null
          description                  = null
          max_connections              = null
          max_connections_per_instance = null
          max_connections_per_endpoint = null
          max_rate                     = null
          max_rate_per_instance        = null
          max_rate_per_endpoint        = null
          max_utilization              = null
        },
        {
          group                        = data.google_compute_instance_group.default-pool[1].self_link
          balancing_mode               = null
          capacity_scaler              = null
          description                  = null
          max_connections              = null
          max_connections_per_instance = null
          max_connections_per_endpoint = null
          max_rate                     = null
          max_rate_per_instance        = null
          max_rate_per_endpoint        = null
          max_utilization              = null
        },
        {
          group                        = data.google_compute_instance_group.default-pool[2].self_link
          balancing_mode               = null
          capacity_scaler              = null
          description                  = null
          max_connections              = null
          max_connections_per_instance = null
          max_connections_per_endpoint = null
          max_rate                     = null
          max_rate_per_instance        = null
          max_rate_per_endpoint        = null
          max_utilization              = null
        },
      ]

      iap_config = {
        enable               = true
        oauth2_client_id     = google_iap_client.main.client_id
        oauth2_client_secret = google_iap_client.main.secret
      }
    }
  }
}

resource "google_compute_url_map" "my-url-map" {
  name            = var.lb_name
  default_service = module.gce-lb-https.backend_services["default-new"].self_link

  host_rule {
    hosts        = ["*"]
    path_matcher = "allpaths"
  }

  host_rule {
    hosts        = ["argo-dev.indykite.com"]
    path_matcher = "argo-dev"
  }

  path_matcher {
    name            = "allpaths"
    default_service = module.gce-lb-https.backend_services["default-new"].self_link
  }

  path_matcher {
    name            = "argo-dev"
    default_service = module.gce-lb-https.backend_services["argo"].self_link
  }
}
