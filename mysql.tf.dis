resource "random_id" "name" {
  byte_length = 2
}

locals {
  # If name_override is specified, use that - otherwise use the name_prefix with a random string
  instance_name   = var.name_override == null ? format("%s%s", var.environment_name_prefix, random_id.name.hex) : var.name_override
  private_ip_name = "private-ip-${random_id.name.hex}"
  dbs             = toset(var.databases)
}

resource "google_compute_global_address" "private_ip_address" {
  provider      = google-beta
  name          = local.private_ip_name
  purpose       = "VPC_PEERING"
  address_type  = "INTERNAL"
  prefix_length = 16
  network       = module.vpc_network.network
}

# Establish VPC network peering connection using the reserved address range
resource "google_service_networking_connection" "private_vpc_connection" {
  provider                = google-beta
  network                 = module.vpc_network.network
  service                 = "servicenetworking.googleapis.com"
  reserved_peering_ranges = [google_compute_global_address.private_ip_address.name, google_compute_global_address.redis_private_ip_address.name]
}

resource "google_sql_database_instance" "dev_sql" {
  provider = google-beta

  name             = local.instance_name
  region           = var.region
  project          = var.project
  database_version = var.mysql_version

  depends_on = [google_service_networking_connection.private_vpc_connection]

  settings {
    tier = var.mysql_db_machine_type
    backup_configuration {
      enabled = true
    }
    ip_configuration {
      ipv4_enabled    = true
      require_ssl     = true
      private_network = module.vpc_network.network
      authorized_networks {
        value = "89.103.116.101/32"
        name  = "martin"
      }

      authorized_networks {
        value = "93.95.33.47/32"
        name  = "martin-office"
      }
    }
  }
}

resource "google_sql_database" "databases" {
  for_each = local.dbs
  name     = each.value
  instance = google_sql_database_instance.dev_sql.name
}

resource "google_sql_user" "roor_user" {
  name     = "root"
  host     = "%"
  instance = google_sql_database_instance.dev_sql.name
  password = data.sops_file.temporal-secrets.data["db.rootPassword"]
}

resource "google_sql_user" "temporal_user" {
  name     = "temporal"
  host     = "%"
  instance = google_sql_database_instance.dev_sql.name
  password = data.sops_file.temporal-secrets.data["server.config.persistence.default.sql.password"]
}
