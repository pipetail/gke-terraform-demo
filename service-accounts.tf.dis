locals {
  services = toset(var.services)
}

resource "google_service_account" "svcs" {
  for_each     = local.services
  display_name = "${each.value} service"
  description  = "Service account used for ${each.value} service in K8s"
  account_id   = "${each.value}-service"

  depends_on = [
    google_project_service.services["iam.googleapis.com"],
  ]
}

resource "google_service_account_iam_binding" "svcs-workload-identity" {
  for_each           = local.services
  role               = "roles/iam.workloadIdentityUser"
  service_account_id = google_service_account.svcs[each.value].name

  members = [
    "serviceAccount:${var.project}.svc.id.goog[${local.namespace}/${each.value}-sa]",
  ]
}

resource "google_project_iam_member" "project-roles" {
  for_each = local.services
  role     = "roles/cloudtrace.agent"
  member   = "serviceAccount:${google_service_account.svcs[each.value].email}"
}
resource "google_project_iam_member" "logging-roles" {
  for_each = local.services
  role     = "roles/logging.logWriter"
  member   = "serviceAccount:${google_service_account.svcs[each.value].email}"
}

resource "google_project_iam_member" "monitoring-roles" {
  for_each = local.services
  role     = "roles/monitoring.metricWriter"
  member   = "serviceAccount:${google_service_account.svcs[each.value].email}"
}

resource "google_project_iam_member" "hera-roles" {
  role   = "roles/pubsub.publisher"
  member = "serviceAccount:${google_service_account.svcs["hera"].email}"
}

resource "google_project_iam_member" "hermes-roles" {
  role   = "roles/cloudkms.cryptoKeyEncrypterDecrypter"
  member = "serviceAccount:${google_service_account.svcs["hermes"].email}"
}

resource "google_project_iam_member" "temporal-roles" {
  role   = "roles/cloudsql.client"
  member = "serviceAccount:${google_service_account.svcs["temporal-server"].email}"
}
resource "google_project_iam_member" "argocd-roles" {
  role   = "roles/cloudkms.cryptoKeyEncrypterDecrypter"
  member = "serviceAccount:${google_service_account.svcs["argocd"].email}"
}
resource "google_service_account" "github-gcr-storage-admin" {
  display_name = "GCR storage admin service account"
  description  = "Service account used in GithubActions to publish Docker images to GCR"
  account_id   = "github-gcr-storage-admin"
}
resource "google_project_iam_member" "github-gcr-storage-admin-role" {
  role   = "roles/storage.admin"
  member = "serviceAccount:${google_service_account.github-gcr-storage-admin.email}"
}
resource "google_service_account_key" "github-gcr-storage-admin-role-key" {
  service_account_id = google_service_account.github-gcr-storage-admin.id
}

# ArgoCD test resources SA
resource "google_service_account" "tester" {
  display_name = "Tester service account"
  description  = "Service account used to access test resourcess"
  account_id   = "tester"
  depends_on = [
    google_project_service.services["iam.googleapis.com"],
  ]
}

resource "google_service_account_iam_binding" "robot-tests-sa" {
  role               = "roles/iam.workloadIdentityUser"
  service_account_id = google_service_account.tester.name

  members = [
    "serviceAccount:${var.project}.svc.id.goog[${local.namespace}/robot-tests-sa]",
  ]
}

# resource "google_project_iam_member" "tester-roles" {
#   role   = "roles/storage.admin"
#   member = "serviceAccount:${google_service_account.tester.email}"
#   condition {
#     title      = "Access only results bucket"
#     expression = "resource.name.startsWith('projects/${var.project}/buckets/robot_results_deploy')"
#   }
# }

// this resource does not support terraform import
# resource "google_service_account_key" "keys" {
#   for_each           = local.services
#   service_account_id = google_service_account.svcs[each.value].id
# }
